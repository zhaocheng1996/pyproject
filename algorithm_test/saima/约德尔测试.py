'''
约德尔测试
									题目描述
兰博和提莫闲聊之后，回归到了他们的正题，约德尔人的未来。
说起约德尔人的未来，黑默丁格曾经提出了一个约德尔测试，将约德尔人的历史的每个阶段都用一个字符表达出来。(包括可写字符,不包括空格。)。然后将这个字符串转化为一个01串。转化规则是如果这个字符如果是字母或者数字，这个字符变为1,其它变为0。然后将这个01串和黑默丁格观测星空得到的01串做比较，得到一个相似率。相似率越高,则约德尔的未来越光明。
请问:相似率为多少？
输入
每组输入数据为两行，第一行为有关约德尔人历史的字符串，第二行是黑默丁格观测星空得到的字符串。
(两个字符串的长度相等,字符串长度不小于1且不超过1000。)
样例输入
@!%12dgsa
010111100
输出
输出一行，在这一行输出相似率。用百分数表示。(相似率为相同字符的个数/总个数,精确到百分号小数点后两位。printf("%%");输出一个%。)
样例输出
66.67%
'''
'''
严格解析：有除了数字或者字母外的符号（空格，分号,etc.）都会False
isalnum()必须是数字和字母的混合
isalpha()不区分大小写
'''

# a = input()
# b = input()
a = '@!%12dgsa'
b = '010111100'
new_a = []
for i in a:
    if i.isalnum():
        new_a.append(1)
    else:
        new_a.append(0)

b = list(b)
c = [b[i] for i in range(len(b)) if int(new_a[i])==int((b[i]))]
pre = 100*(len(c))/len(b)

print(str(round(pre,2))+'%')
#还有一种输出方法
print('%.2f%%' %pre)#printf("%%");输出一个%



